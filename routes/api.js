const express = require("express");
const router = express.Router();
const User = require("../models/User.js");

// API endpoints

// Get All Users (GET /api/users)
router.get("/users", async (req, res) => {
  try {
    const users = await User.find({}, "username _id");
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Create User (POST /api/users)
router.post("/users", async (req, res) => {
  try {
    const user = new User({ username: req.body.username });
    await user.save();
    res.json({
      username: user.username,
      _id: user._id, // Auto generated by MongoDB
    });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Add Exercise (POST /api/users/:_id/exercises)
router.post("/users/:_id/exercises", async (req, res) => {
  const { description, duration, date } = req.body;

  // input validation for description and duration
  if (!description || !duration) {
    return res
      .status(400)
      .json({ error: "Description and duration are required" });
  }

  // duration validation
  if (isNaN(duration)) {
    return res.status(400).json({ error: "Duration must be a number" });
  }

  // date validation
  if (date && isNaN(new Date(date))) {
    return res
      .status(400)
      .json({
        error: "Invalid date format",
        timestamp: new Date().toISOString(), // test to aid debugging
      });
  }

  try {
    const user = await User.findById(req.params._id);
    if (!user) return res.status(404).send("User not found");

    user.log.push({
      description,
      duration: Number(duration),
      date: date ? new Date(date) : new Date(),
    });

    await user.save();

    res.json({
      username: user.username,
      _id: user._id,
      description,
      duration: Number(duration),
      date: new Date(date || Date.now()).toDateString(),
    });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Add Log Retrieval Endpoint (GET /api/users/:_id/logs)
router.get("/users/:_id/logs", async (req, res) => {
  try {
    const user = await User.findById(req.params._id);
    if (!user) return res.status(404).send("User not found");

    let log = user.log;

    // Optional filtering
    if (req.query.from || req.query.to) {
      const fromDate = new Date(req.query.from || 0);
      const toDate = new Date(req.query.to || Date.now());
      log = log.filter((ex) => ex.date >= fromDate && ex.date <= toDate);
    }

    if (req.query.limit) {
      log = log.slice(0, parseInt(req.query.limit));
    }

    res.json({
      username: user.username,
      count: log.length,
      _id: user._id,
      log: log.map((ex) => ({
        description: ex.description,
        duration: ex.duration,
        date: ex.date.toDateString(),
      })),
    });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;
